package org.literacyapp.contentprovider.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import java.util.Calendar;
import org.literacyapp.contentprovider.dao.converter.CalendarConverter;

import org.literacyapp.contentprovider.model.StudentImageFeature;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STUDENT_IMAGE_FEATURE".
*/
public class StudentImageFeatureDao extends AbstractDao<StudentImageFeature, Long> {

    public static final String TABLENAME = "STUDENT_IMAGE_FEATURE";

    /**
     * Properties of entity StudentImageFeature.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TimeCreated = new Property(1, long.class, "timeCreated", false, "TIME_CREATED");
        public final static Property FeatureVector = new Property(2, String.class, "featureVector", false, "FEATURE_VECTOR");
    }

    private final CalendarConverter timeCreatedConverter = new CalendarConverter();

    public StudentImageFeatureDao(DaoConfig config) {
        super(config);
    }
    
    public StudentImageFeatureDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STUDENT_IMAGE_FEATURE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TIME_CREATED\" INTEGER NOT NULL ," + // 1: timeCreated
                "\"FEATURE_VECTOR\" TEXT NOT NULL );"); // 2: featureVector
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STUDENT_IMAGE_FEATURE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StudentImageFeature entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, timeCreatedConverter.convertToDatabaseValue(entity.getTimeCreated()));
        stmt.bindString(3, entity.getFeatureVector());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StudentImageFeature entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, timeCreatedConverter.convertToDatabaseValue(entity.getTimeCreated()));
        stmt.bindString(3, entity.getFeatureVector());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StudentImageFeature readEntity(Cursor cursor, int offset) {
        StudentImageFeature entity = new StudentImageFeature( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            timeCreatedConverter.convertToEntityProperty(cursor.getLong(offset + 1)), // timeCreated
            cursor.getString(offset + 2) // featureVector
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StudentImageFeature entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTimeCreated(timeCreatedConverter.convertToEntityProperty(cursor.getLong(offset + 1)));
        entity.setFeatureVector(cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StudentImageFeature entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StudentImageFeature entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StudentImageFeature entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
