package org.literacyapp.contentprovider.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import java.util.Calendar;
import org.literacyapp.contentprovider.dao.converter.CalendarConverter;
import org.literacyapp.contentprovider.dao.converter.ContentStatusConverter;
import org.literacyapp.contentprovider.dao.converter.LocaleConverter;
import org.literacyapp.contentprovider.model.content.multimedia.JoinAudiosWithNumbers;
import org.literacyapp.contentprovider.model.content.multimedia.JoinImagesWithNumbers;
import org.literacyapp.contentprovider.model.content.multimedia.JoinVideosWithNumbers;
import org.literacyapp.model.enums.Locale;
import org.literacyapp.model.enums.content.ContentStatus;

import org.literacyapp.contentprovider.model.content.Number;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NUMBER".
*/
public class NumberDao extends AbstractDao<Number, Long> {

    public static final String TABLENAME = "NUMBER";

    /**
     * Properties of entity Number.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Locale = new Property(1, String.class, "locale", false, "LOCALE");
        public final static Property TimeLastUpdate = new Property(2, Long.class, "timeLastUpdate", false, "TIME_LAST_UPDATE");
        public final static Property RevisionNumber = new Property(3, Integer.class, "revisionNumber", false, "REVISION_NUMBER");
        public final static Property ContentStatus = new Property(4, String.class, "contentStatus", false, "CONTENT_STATUS");
        public final static Property Value = new Property(5, Integer.class, "value", false, "VALUE");
        public final static Property Symbol = new Property(6, String.class, "symbol", false, "SYMBOL");
    }

    private DaoSession daoSession;

    private final LocaleConverter localeConverter = new LocaleConverter();
    private final CalendarConverter timeLastUpdateConverter = new CalendarConverter();
    private final ContentStatusConverter contentStatusConverter = new ContentStatusConverter();
    private Query<Number> audio_NumbersQuery;
    private Query<Number> image_NumbersQuery;
    private Query<Number> video_NumbersQuery;

    public NumberDao(DaoConfig config) {
        super(config);
    }
    
    public NumberDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NUMBER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"LOCALE\" TEXT NOT NULL ," + // 1: locale
                "\"TIME_LAST_UPDATE\" INTEGER," + // 2: timeLastUpdate
                "\"REVISION_NUMBER\" INTEGER NOT NULL ," + // 3: revisionNumber
                "\"CONTENT_STATUS\" TEXT NOT NULL ," + // 4: contentStatus
                "\"VALUE\" INTEGER NOT NULL ," + // 5: value
                "\"SYMBOL\" TEXT);"); // 6: symbol
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NUMBER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Number entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, localeConverter.convertToDatabaseValue(entity.getLocale()));
 
        Calendar timeLastUpdate = entity.getTimeLastUpdate();
        if (timeLastUpdate != null) {
            stmt.bindLong(3, timeLastUpdateConverter.convertToDatabaseValue(timeLastUpdate));
        }
        stmt.bindLong(4, entity.getRevisionNumber());
        stmt.bindString(5, contentStatusConverter.convertToDatabaseValue(entity.getContentStatus()));
        stmt.bindLong(6, entity.getValue());
 
        String symbol = entity.getSymbol();
        if (symbol != null) {
            stmt.bindString(7, symbol);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Number entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, localeConverter.convertToDatabaseValue(entity.getLocale()));
 
        Calendar timeLastUpdate = entity.getTimeLastUpdate();
        if (timeLastUpdate != null) {
            stmt.bindLong(3, timeLastUpdateConverter.convertToDatabaseValue(timeLastUpdate));
        }
        stmt.bindLong(4, entity.getRevisionNumber());
        stmt.bindString(5, contentStatusConverter.convertToDatabaseValue(entity.getContentStatus()));
        stmt.bindLong(6, entity.getValue());
 
        String symbol = entity.getSymbol();
        if (symbol != null) {
            stmt.bindString(7, symbol);
        }
    }

    @Override
    protected final void attachEntity(Number entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Number readEntity(Cursor cursor, int offset) {
        Number entity = new Number( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            localeConverter.convertToEntityProperty(cursor.getString(offset + 1)), // locale
            cursor.isNull(offset + 2) ? null : timeLastUpdateConverter.convertToEntityProperty(cursor.getLong(offset + 2)), // timeLastUpdate
            cursor.getInt(offset + 3), // revisionNumber
            contentStatusConverter.convertToEntityProperty(cursor.getString(offset + 4)), // contentStatus
            cursor.getInt(offset + 5), // value
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // symbol
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Number entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLocale(localeConverter.convertToEntityProperty(cursor.getString(offset + 1)));
        entity.setTimeLastUpdate(cursor.isNull(offset + 2) ? null : timeLastUpdateConverter.convertToEntityProperty(cursor.getLong(offset + 2)));
        entity.setRevisionNumber(cursor.getInt(offset + 3));
        entity.setContentStatus(contentStatusConverter.convertToEntityProperty(cursor.getString(offset + 4)));
        entity.setValue(cursor.getInt(offset + 5));
        entity.setSymbol(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Number entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Number entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Number entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "numbers" to-many relationship of Audio. */
    public List<Number> _queryAudio_Numbers(long audioId) {
        synchronized (this) {
            if (audio_NumbersQuery == null) {
                QueryBuilder<Number> queryBuilder = queryBuilder();
                queryBuilder.join(JoinAudiosWithNumbers.class, JoinAudiosWithNumbersDao.Properties.NumberId)
                    .where(JoinAudiosWithNumbersDao.Properties.AudioId.eq(audioId));
                audio_NumbersQuery = queryBuilder.build();
            }
        }
        Query<Number> query = audio_NumbersQuery.forCurrentThread();
        query.setParameter(0, audioId);
        return query.list();
    }

    /** Internal query to resolve the "numbers" to-many relationship of Image. */
    public List<Number> _queryImage_Numbers(long imageId) {
        synchronized (this) {
            if (image_NumbersQuery == null) {
                QueryBuilder<Number> queryBuilder = queryBuilder();
                queryBuilder.join(JoinImagesWithNumbers.class, JoinImagesWithNumbersDao.Properties.NumberId)
                    .where(JoinImagesWithNumbersDao.Properties.ImageId.eq(imageId));
                image_NumbersQuery = queryBuilder.build();
            }
        }
        Query<Number> query = image_NumbersQuery.forCurrentThread();
        query.setParameter(0, imageId);
        return query.list();
    }

    /** Internal query to resolve the "numbers" to-many relationship of Video. */
    public List<Number> _queryVideo_Numbers(long videoId) {
        synchronized (this) {
            if (video_NumbersQuery == null) {
                QueryBuilder<Number> queryBuilder = queryBuilder();
                queryBuilder.join(JoinVideosWithNumbers.class, JoinVideosWithNumbersDao.Properties.NumberId)
                    .where(JoinVideosWithNumbersDao.Properties.VideoId.eq(videoId));
                video_NumbersQuery = queryBuilder.build();
            }
        }
        Query<Number> query = video_NumbersQuery.forCurrentThread();
        query.setParameter(0, videoId);
        return query.list();
    }

}
