package org.literacyapp.dao;

import org.literacyapp.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import java.util.Calendar;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "STUDENT_IMAGE".
 */
public class StudentImage {

    private Long id;
    private Long deviceId;
    private String imageFileUrl;
    private Calendar timeCollected;
    private Long studentImageFeatureId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient StudentImageDao myDao;

    private Device device;
    private Long device__resolvedKey;

    private StudentImageFeature studentImageFeature;
    private Long studentImageFeature__resolvedKey;


    public StudentImage() {
    }

    public StudentImage(Long id) {
        this.id = id;
    }

    public StudentImage(Long id, Long deviceId, String imageFileUrl, Calendar timeCollected, Long studentImageFeatureId) {
        this.id = id;
        this.deviceId = deviceId;
        this.imageFileUrl = imageFileUrl;
        this.timeCollected = timeCollected;
        this.studentImageFeatureId = studentImageFeatureId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getStudentImageDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getDeviceId() {
        return deviceId;
    }

    public void setDeviceId(Long deviceId) {
        this.deviceId = deviceId;
    }

    public String getImageFileUrl() {
        return imageFileUrl;
    }

    public void setImageFileUrl(String imageFileUrl) {
        this.imageFileUrl = imageFileUrl;
    }

    public Calendar getTimeCollected() {
        return timeCollected;
    }

    public void setTimeCollected(Calendar timeCollected) {
        this.timeCollected = timeCollected;
    }

    public Long getStudentImageFeatureId() {
        return studentImageFeatureId;
    }

    public void setStudentImageFeatureId(Long studentImageFeatureId) {
        this.studentImageFeatureId = studentImageFeatureId;
    }

    /** To-one relationship, resolved on first access. */
    public Device getDevice() {
        Long __key = this.deviceId;
        if (device__resolvedKey == null || !device__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DeviceDao targetDao = daoSession.getDeviceDao();
            Device deviceNew = targetDao.load(__key);
            synchronized (this) {
                device = deviceNew;
            	device__resolvedKey = __key;
            }
        }
        return device;
    }

    public void setDevice(Device device) {
        synchronized (this) {
            this.device = device;
            deviceId = device == null ? null : device.getId();
            device__resolvedKey = deviceId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public StudentImageFeature getStudentImageFeature() {
        Long __key = this.studentImageFeatureId;
        if (studentImageFeature__resolvedKey == null || !studentImageFeature__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StudentImageFeatureDao targetDao = daoSession.getStudentImageFeatureDao();
            StudentImageFeature studentImageFeatureNew = targetDao.load(__key);
            synchronized (this) {
                studentImageFeature = studentImageFeatureNew;
            	studentImageFeature__resolvedKey = __key;
            }
        }
        return studentImageFeature;
    }

    public void setStudentImageFeature(StudentImageFeature studentImageFeature) {
        synchronized (this) {
            this.studentImageFeature = studentImageFeature;
            studentImageFeatureId = studentImageFeature == null ? null : studentImageFeature.getId();
            studentImageFeature__resolvedKey = studentImageFeatureId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
