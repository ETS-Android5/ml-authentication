package org.literacyapp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import java.util.Calendar;
import org.literacyapp.dao.converter.CalendarConverter;
import org.literacyapp.dao.converter.ConsonantPlaceConverter;
import org.literacyapp.dao.converter.ConsonantTypeConverter;
import org.literacyapp.dao.converter.ConsonantVoicingConverter;
import org.literacyapp.dao.converter.LipRoundingConverter;
import org.literacyapp.dao.converter.LocaleConverter;
import org.literacyapp.dao.converter.SoundTypeConverter;
import org.literacyapp.dao.converter.VowelFrontnessConverter;
import org.literacyapp.dao.converter.VowelHeightConverter;
import org.literacyapp.dao.converter.VowelLengthConverter;
import org.literacyapp.model.enums.Locale;
import org.literacyapp.model.enums.content.allophone.ConsonantPlace;
import org.literacyapp.model.enums.content.allophone.ConsonantType;
import org.literacyapp.model.enums.content.allophone.ConsonantVoicing;
import org.literacyapp.model.enums.content.allophone.LipRounding;
import org.literacyapp.model.enums.content.allophone.SoundType;
import org.literacyapp.model.enums.content.allophone.VowelFrontness;
import org.literacyapp.model.enums.content.allophone.VowelHeight;
import org.literacyapp.model.enums.content.allophone.VowelLength;

import org.literacyapp.dao.Allophone;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALLOPHONE".
*/
public class AllophoneDao extends AbstractDao<Allophone, Long> {

    public static final String TABLENAME = "ALLOPHONE";

    /**
     * Properties of entity Allophone.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Locale = new Property(1, String.class, "locale", false, "LOCALE");
        public final static Property TimeLastUpdate = new Property(2, Long.class, "timeLastUpdate", false, "TIME_LAST_UPDATE");
        public final static Property RevisionNumber = new Property(3, Integer.class, "revisionNumber", false, "REVISION_NUMBER");
        public final static Property ValueIpa = new Property(4, String.class, "valueIpa", false, "VALUE_IPA");
        public final static Property ValueSampa = new Property(5, String.class, "valueSampa", false, "VALUE_SAMPA");
        public final static Property SoundType = new Property(6, String.class, "soundType", false, "SOUND_TYPE");
        public final static Property VowelLength = new Property(7, String.class, "vowelLength", false, "VOWEL_LENGTH");
        public final static Property VowelHeight = new Property(8, String.class, "vowelHeight", false, "VOWEL_HEIGHT");
        public final static Property VowelFrontness = new Property(9, String.class, "vowelFrontness", false, "VOWEL_FRONTNESS");
        public final static Property LipRounding = new Property(10, String.class, "lipRounding", false, "LIP_ROUNDING");
        public final static Property ConsonantType = new Property(11, String.class, "consonantType", false, "CONSONANT_TYPE");
        public final static Property ConsonantPlace = new Property(12, String.class, "consonantPlace", false, "CONSONANT_PLACE");
        public final static Property ConsonantVoicing = new Property(13, String.class, "consonantVoicing", false, "CONSONANT_VOICING");
    };

    private final LocaleConverter localeConverter = new LocaleConverter();
    private final CalendarConverter timeLastUpdateConverter = new CalendarConverter();
    private final SoundTypeConverter soundTypeConverter = new SoundTypeConverter();
    private final VowelLengthConverter vowelLengthConverter = new VowelLengthConverter();
    private final VowelHeightConverter vowelHeightConverter = new VowelHeightConverter();
    private final VowelFrontnessConverter vowelFrontnessConverter = new VowelFrontnessConverter();
    private final LipRoundingConverter lipRoundingConverter = new LipRoundingConverter();
    private final ConsonantTypeConverter consonantTypeConverter = new ConsonantTypeConverter();
    private final ConsonantPlaceConverter consonantPlaceConverter = new ConsonantPlaceConverter();
    private final ConsonantVoicingConverter consonantVoicingConverter = new ConsonantVoicingConverter();

    public AllophoneDao(DaoConfig config) {
        super(config);
    }
    
    public AllophoneDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALLOPHONE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"LOCALE\" TEXT," + // 1: locale
                "\"TIME_LAST_UPDATE\" INTEGER," + // 2: timeLastUpdate
                "\"REVISION_NUMBER\" INTEGER," + // 3: revisionNumber
                "\"VALUE_IPA\" TEXT," + // 4: valueIpa
                "\"VALUE_SAMPA\" TEXT," + // 5: valueSampa
                "\"SOUND_TYPE\" TEXT," + // 6: soundType
                "\"VOWEL_LENGTH\" TEXT," + // 7: vowelLength
                "\"VOWEL_HEIGHT\" TEXT," + // 8: vowelHeight
                "\"VOWEL_FRONTNESS\" TEXT," + // 9: vowelFrontness
                "\"LIP_ROUNDING\" TEXT," + // 10: lipRounding
                "\"CONSONANT_TYPE\" TEXT," + // 11: consonantType
                "\"CONSONANT_PLACE\" TEXT," + // 12: consonantPlace
                "\"CONSONANT_VOICING\" TEXT);"); // 13: consonantVoicing
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALLOPHONE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Allophone entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Locale locale = entity.getLocale();
        if (locale != null) {
            stmt.bindString(2, localeConverter.convertToDatabaseValue(locale));
        }
 
        Calendar timeLastUpdate = entity.getTimeLastUpdate();
        if (timeLastUpdate != null) {
            stmt.bindLong(3, timeLastUpdateConverter.convertToDatabaseValue(timeLastUpdate));
        }
 
        Integer revisionNumber = entity.getRevisionNumber();
        if (revisionNumber != null) {
            stmt.bindLong(4, revisionNumber);
        }
 
        String valueIpa = entity.getValueIpa();
        if (valueIpa != null) {
            stmt.bindString(5, valueIpa);
        }
 
        String valueSampa = entity.getValueSampa();
        if (valueSampa != null) {
            stmt.bindString(6, valueSampa);
        }
 
        SoundType soundType = entity.getSoundType();
        if (soundType != null) {
            stmt.bindString(7, soundTypeConverter.convertToDatabaseValue(soundType));
        }
 
        VowelLength vowelLength = entity.getVowelLength();
        if (vowelLength != null) {
            stmt.bindString(8, vowelLengthConverter.convertToDatabaseValue(vowelLength));
        }
 
        VowelHeight vowelHeight = entity.getVowelHeight();
        if (vowelHeight != null) {
            stmt.bindString(9, vowelHeightConverter.convertToDatabaseValue(vowelHeight));
        }
 
        VowelFrontness vowelFrontness = entity.getVowelFrontness();
        if (vowelFrontness != null) {
            stmt.bindString(10, vowelFrontnessConverter.convertToDatabaseValue(vowelFrontness));
        }
 
        LipRounding lipRounding = entity.getLipRounding();
        if (lipRounding != null) {
            stmt.bindString(11, lipRoundingConverter.convertToDatabaseValue(lipRounding));
        }
 
        ConsonantType consonantType = entity.getConsonantType();
        if (consonantType != null) {
            stmt.bindString(12, consonantTypeConverter.convertToDatabaseValue(consonantType));
        }
 
        ConsonantPlace consonantPlace = entity.getConsonantPlace();
        if (consonantPlace != null) {
            stmt.bindString(13, consonantPlaceConverter.convertToDatabaseValue(consonantPlace));
        }
 
        ConsonantVoicing consonantVoicing = entity.getConsonantVoicing();
        if (consonantVoicing != null) {
            stmt.bindString(14, consonantVoicingConverter.convertToDatabaseValue(consonantVoicing));
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Allophone readEntity(Cursor cursor, int offset) {
        Allophone entity = new Allophone( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : localeConverter.convertToEntityProperty(cursor.getString(offset + 1)), // locale
            cursor.isNull(offset + 2) ? null : timeLastUpdateConverter.convertToEntityProperty(cursor.getLong(offset + 2)), // timeLastUpdate
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // revisionNumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // valueIpa
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // valueSampa
            cursor.isNull(offset + 6) ? null : soundTypeConverter.convertToEntityProperty(cursor.getString(offset + 6)), // soundType
            cursor.isNull(offset + 7) ? null : vowelLengthConverter.convertToEntityProperty(cursor.getString(offset + 7)), // vowelLength
            cursor.isNull(offset + 8) ? null : vowelHeightConverter.convertToEntityProperty(cursor.getString(offset + 8)), // vowelHeight
            cursor.isNull(offset + 9) ? null : vowelFrontnessConverter.convertToEntityProperty(cursor.getString(offset + 9)), // vowelFrontness
            cursor.isNull(offset + 10) ? null : lipRoundingConverter.convertToEntityProperty(cursor.getString(offset + 10)), // lipRounding
            cursor.isNull(offset + 11) ? null : consonantTypeConverter.convertToEntityProperty(cursor.getString(offset + 11)), // consonantType
            cursor.isNull(offset + 12) ? null : consonantPlaceConverter.convertToEntityProperty(cursor.getString(offset + 12)), // consonantPlace
            cursor.isNull(offset + 13) ? null : consonantVoicingConverter.convertToEntityProperty(cursor.getString(offset + 13)) // consonantVoicing
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Allophone entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLocale(cursor.isNull(offset + 1) ? null : localeConverter.convertToEntityProperty(cursor.getString(offset + 1)));
        entity.setTimeLastUpdate(cursor.isNull(offset + 2) ? null : timeLastUpdateConverter.convertToEntityProperty(cursor.getLong(offset + 2)));
        entity.setRevisionNumber(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setValueIpa(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setValueSampa(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSoundType(cursor.isNull(offset + 6) ? null : soundTypeConverter.convertToEntityProperty(cursor.getString(offset + 6)));
        entity.setVowelLength(cursor.isNull(offset + 7) ? null : vowelLengthConverter.convertToEntityProperty(cursor.getString(offset + 7)));
        entity.setVowelHeight(cursor.isNull(offset + 8) ? null : vowelHeightConverter.convertToEntityProperty(cursor.getString(offset + 8)));
        entity.setVowelFrontness(cursor.isNull(offset + 9) ? null : vowelFrontnessConverter.convertToEntityProperty(cursor.getString(offset + 9)));
        entity.setLipRounding(cursor.isNull(offset + 10) ? null : lipRoundingConverter.convertToEntityProperty(cursor.getString(offset + 10)));
        entity.setConsonantType(cursor.isNull(offset + 11) ? null : consonantTypeConverter.convertToEntityProperty(cursor.getString(offset + 11)));
        entity.setConsonantPlace(cursor.isNull(offset + 12) ? null : consonantPlaceConverter.convertToEntityProperty(cursor.getString(offset + 12)));
        entity.setConsonantVoicing(cursor.isNull(offset + 13) ? null : consonantVoicingConverter.convertToEntityProperty(cursor.getString(offset + 13)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Allophone entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Allophone entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
